//= depend_on_asset "modal_form.html"
//= depend_on_asset "plus.png"
//= depend_on_asset "minus.png"

var app = angular.module('app', ['ui.bootstrap','ui.sortable','ae-datetimepicker','ngResource', 'ngAnimate','ngCookies'])

app.factory('ContactService', ['$resource', ContactService]);
function ContactService($resource) {
  return $resource('/contacts/:id.json');
}

app.factory('ContactAssignmentService', ['$resource', ContactAssignmentService]);
function ContactAssignmentService($resource) {
  return $resource('/contact_assignments/:collectionRoute/:id.json', null,
      {
        'update': {method: 'PUT', format: 'json'},
        'reopen': {method: 'GET', isArray: false, params: {collectionRoute: 'reopen', format: 'json'}}
      });
}

app.factory('StudentService', ['$resource', StudentService]);
function StudentService($resource) {
  return $resource('/students/:collectionRoute/:id.json', null,
      {
        'active': {method: 'GET', isArray: true, params: {collectionRoute: 'active', format: 'json'}}
      });
}

app.factory('OrganizationService', ['$resource', OrganizationService]);
function OrganizationService($resource) {
  return $resource('/organizations/:id.json');
}

app.factory('VanRouteService', ['$resource', VanRouteService]);

function VanRouteService($resource) {
  return $resource('/van_routes/:collectionRoute/:id.json', null,
      {
        'copy': {method: 'GET', isArray: true, params: {collectionRoute: 'copy', format: 'json'}},
        'prior_days': {method: 'GET', isArray: true, params: {collectionRoute: 'prior_days', format: 'json'}}
      });
}

app.factory('IncidentService', ['$resource', IncidentService]);

function IncidentService($resource) {
  return $resource('/incidents/:collectionRoute/:id.json', null,
      {
        'organizations': {method: 'GET', isArray: true, params: {collectionRoute: 'organizations'}},
        'students': {method: 'GET', isArray: true, params: {collectionRoute: 'students'}},
        'contacts': {method: 'GET', isArray: true, params: {collectionRoute: 'contacts'}}
      });
}

app.factory('PlacementService', ['$resource', PlacementService]);

function PlacementService($resource) {
  return $resource('/placements/:collectionRoute/:id.json', null,
      {
        'contacts': {method: 'GET', isArray: true, params: {collectionRoute: 'contacts'}},
        'students': {method: 'GET', isArray: true, params: {collectionRoute: 'students'}}
      });
}

app.factory('PlusMinus',function(){
  return {

    get_url: function(isplus) {
      if (isplus)
        return '<%= asset_path("plus.png") %>';
      else
        return '<%= asset_path("minus.png") %>';
    }
  }
});

app.directive('ngReallyClick', [function() {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      element.bind('click', function() {
        var message = attrs.ngReallyMessage;
        if (message && confirm(message)) {
          scope.$apply(attrs.ngReallyClick);
        }
      });
    }
  }
}]);

app.directive('ngDoubleDate', function(){
  return {
    restrict: 'EAC',
    scope: {
      sel_dates: '=model'
    },
    link: function(scope, elem, attr, ctrl) {
      //create a new script tag and append it to the directive's element.
      var scr = document.createElement('script');
      var text = document.createTextNode('$(document).ready(function() {\n' +
      'var SelectedDates = {};\n' + scope.sel_dates + ';\n' +
      '$(\'#datepicker\').datepicker({\n' +
        'numberOfMonths: 2,\n' +
        'dateFormat: "dd-M-yy",\n' +
        'beforeShowDay: function(date) {\n' +
          'var Highlight = SelectedDates[date];\n' +
          'if (Highlight) {\n' +
            'return [true, "Highlighted", Highlight];\n' +
          '}\n' +
          'else {\n' +
            'return [true, \'\', \'\'];\n' +
          '}\n' +
        '}\n' +
      '}).on("change", function(e) {\n' +
         'console.log("Date changed: ", e.target.value);\n' +
         'var element = angular.element($(\'#datepicker\'));' +
         'var controller = element.controller();\n' +
         'controller.selectedDate = e.target.value' +
    '});' +
    '});');
      scr.appendChild(text);
      elem.append(scr);
    }
  }
});

app.service('ModalFormService', ['$modal',
    function ($modal) {

        var modalDefaults = {
            backdrop: true,
            keyboard: true,
            modalFade: true,
            templateUrl: '<%= asset_path("modal_form.html") %>'
        };

        var modalOptions = {
            closeButtonText: 'Cancel',
            actionButtonText: 'Create',
            headerText: 'New Student',
            bodyText: 'Enter a new student name.',
            formLabel: 'Student Name:',
            dateArray: '',
            modalType: 'close_contact'
        };

        this.showModal = function (customModalDefaults, customModalOptions) {
            if (!customModalDefaults) customModalDefaults = {};
            customModalDefaults.backdrop = 'static';
            return this.show(customModalDefaults, customModalOptions);
        };

        this.show = function (customModalDefaults, customModalOptions) {
            //Create temp objects to work with since we're in a singleton service
            var tempModalDefaults = {};
            var tempModalOptions = {};

            //Map angular-ui modal custom defaults to modal defaults defined in service
            angular.extend(tempModalDefaults, modalDefaults, customModalDefaults);

            //Map modal.html $scope custom properties to defaults defined in service
            angular.extend(tempModalOptions, modalOptions, customModalOptions);
            if (tempModalOptions.modalType == 'routes_dates')
              tempModalDefaults.templateUrl = '<%= asset_path("past_routes.html") %>';

          if (!tempModalDefaults.controller) {
                tempModalDefaults.controller = function ($scope, $modalInstance) {
                    $scope.modalOptions = tempModalOptions;
                    $scope.modalOptions.ok = function (result) {
                      $modalInstance.close(result);
                    };
                    $scope.modalOptions.close = function (result) {
                        $modalInstance.dismiss('cancel');
                    };
                }
            }

            return $modal.open(tempModalDefaults).result;
        };

    }]
);
